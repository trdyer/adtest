%module adclient

%{
#include "adclient.h"
%}

%include <typemaps.i>
%include "std_string.i"
%include "std_vector.i"
%include "std_map.i"

namespace std {
    %template(StringVector) vector<string>;
    %template(StringBoolMap) map<string, bool>;
    %template(String_VectorString_Map) map<string, vector<string> >;

    %extend map<string, bool> {
        std::vector<string> keys(void) {
            std::vector<string> k = std::vector<string>();
            for (std::map<string, bool>::iterator iter = self->begin(); iter != self->end(); iter++) {
                k.push_back(iter->first);
            }
            return k;
         }
    }
    %extend map<string, vector<string> > {
        std::vector<string> keys(void) {
            std::vector<string> k = std::vector<string>();
            for (std::map<string, vector<string> >::iterator iter = self->begin(); iter != self->end(); iter++) {
                k.push_back(iter->first);
            }
            return k;
         }
    }

}

%exception {
    try {
        $action;
    } catch (ADException &e) {
        std::stringstream ss;
        ss << e.code << ":" << e.msg;
        _swig_gopanic(ss.str().c_str());
    } catch (std::exception &e) {
        _swig_gopanic(e.what());
    }
}

%include "adclient.h"
